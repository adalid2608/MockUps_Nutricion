# Generated by Django 5.0.1 on 2024-04-17 04:20
from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.RunSQL(
            '''
            DROP TRIGGER IF EXISTS dietas_AFTER_INSERT;
            DROP TRIGGER IF EXISTS dietas_AFTER_UPDATE;
            DROP TRIGGER IF EXISTS dietas_AFTER_DELETE;
            DROP TRIGGER IF EXISTS dietas_usuarios_AFTER_INSERT;
            DROP TRIGGER IF EXISTS dietas_usuarios_AFTER_UPDATE;
            DROP TRIGGER IF EXISTS dietas_usuarios_AFTER_DELETE;
            DROP TRIGGER IF EXISTS indicadores_nutricionales_AFTER_INSERT;
            DROP TRIGGER IF EXISTS indicadores_nutricionales_AFTER_UPDATE;
            DROP TRIGGER IF EXISTS indicadores_nutricionales_AFTER_DELETE;
            DROP TRIGGER IF EXISTS seguimientos_dietas_usuarios_AFTER_INSERT;
            DROP TRIGGER IF EXISTS seguimientos_dietas_usuarios_AFTER_UPDATE;
            DROP TRIGGER IF EXISTS seguimientos_dietas_usuarios_AFTER_DELETE;
            DROP TRIGGER IF EXISTS valoraciones_nutricionales_AFTER_INSERT;
            DROP TRIGGER IF EXISTS valoraciones_nutricionales_AFTER_UPDATE;
            DROP TRIGGER IF EXISTS valoraciones_nutricionales_AFTER_DELETE;
            DROP TRIGGER IF EXISTS preguntas_nutricionales_AFTER_INSERT;
            DROP TRIGGER IF EXISTS preguntas_nutricionales_AFTER_UPDATE;
            DROP TRIGGER IF EXISTS preguntas_nutricionales_AFTER_DELETE;
            '''
        ),

     migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER dietas_AFTER_INSERT AFTER INSERT ON dietas FOR EACH ROW BEGIN
	-- Declaración de variables
    DECLARE v_cadena_estatus varchar(15) default null;
    
    -- Iniciación de las variables
    IF new.estatus = b'1' then
        set v_cadena_estatus = "Activa";
    else
        set v_cadena_estatus = "Inactiva";
    end if;
    
	INSERT INTO bitacora VALUES(
		DEFAULT,
        USER(),
        "Create",
        "dietas",
        CONCAT_WS(" ","Se ha insertado una nueva DIETA con el ID: ",NEW.ID, 
        "con los siguientes datos: NOMBRE=", NEW.nombre,
        "DESCRIPCION = ", NEW.descripcion,
        "OBJETIVO = ", NEW.objetivo, 
        "RESTRICCIONES = ", NEW.restricciones,
        "ESTATUS = ", v_cadena_estatus),
        NOW(),
        TRUE
    );
END
'''),


    migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER dietas_AFTER_UPDATE AFTER UPDATE ON dietas FOR EACH ROW BEGIN
	 -- Declaración de variables
    DECLARE v_cadena_estatus VARCHAR(15) DEFAULT NULL;
    DECLARE v_cadena_estatus2 VARCHAR(15) DEFAULT NULL;
    
	IF NEW.estatus = b'1' THEN
		SET v_cadena_estatus= "Activa";
    ELSE
		SET v_cadena_estatus= "Inactiva";
    END IF; 
    
    IF OLD.estatus = b'1' THEN
		SET v_cadena_estatus2= "Activa";
    ELSE
		SET v_cadena_estatus2= "Inactiva";
    END IF; 
	
    INSERT INTO bitacora VALUES(
        DEFAULT,
        USER(),
        "Update",
        "dietas",
        CONCAT_WS(" ","Se han actualizado los datos de la DIETA con el ID:",NEW.ID,
        "con los siguientes datos: ",
        "NOMBRE = ", OLD.nombre, " cambio a ", NEW.nombre,
        "DESCRIPCION = ", OLD.descripcion,"cambio a ", NEW.descripcion,
        "OBJETIVO = ", OLD.objetivo," cambio a", NEW.objetivo,
        "RESCRICCIONES = ", OLD.restricciones," cambio a ", NEW.restricciones,
        "ESTATUS = ", v_cadena_estatus2, " cambio a ", v_cadena_estatus),
        NOW(),
        DEFAULT       
    );
END

'''),

    migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER dietas_AFTER_DELETE AFTER DELETE ON dietas FOR EACH ROW BEGIN
	INSERT INTO bitacora VALUES(
		DEFAULT,
        USER(),
        "Delete",
        "dietas",
        CONCAT_WS(" ","Se ha eliminado una DIETA con el ID: ", OLD.ID),
        now(),
        DEFAULT
    );
END

'''),

    migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER dietas_usuarios_AFTER_INSERT AFTER INSERT ON dietas_usuarios FOR EACH ROW BEGIN
	-- Declaración de variables
    DECLARE v_cadena_estatus varchar(15) default null;
    DECLARE v_nombre_usuario varchar(60) default null;

    -- Iniciación de las variables
    IF new.estatus = b'1' then
        set v_cadena_estatus = "Activa";
    else
        set v_cadena_estatus = "Inactiva";
    end if;

    if new.usuario_id is not null then
        -- En caso de tener el id del empleado responsable debemos recuperar su nombre
        set v_nombre_usuario = (SELECT CONCAT_WS(" ", p.titulo_cortesia, p.nombre, p.primer_apellido, p.segundo_Apellido) FROM personas p WHERE id = NEW.usuario_id);
    else
        SET v_nombre_usuario = "Sin usuario asignado";
    end if;

    -- Insertar en la bitacora
    INSERT INTO bitacora VALUES(
        DEFAULT,
        USER(),
        "Create",
        "dietas_usuarios",
        CONCAT_WS(" ","Se ha insertado una nueva relación DIETA USUARIO con el ID: ",NEW.ID, 
        "con los siguientes datos: ",
        "USUARIO ID = ", v_nombre_usuario,
        "DIETA ID = ", NEw.dieta_id,
        "FECHA DE ASIGNACIÓN = ", new.fecha_asignacion,
        "SUCURSFECHA DE INICIOAL ID = ", new.fecha_inicio,
        "FECHA FIN = ", NEW.fecha_fin, 
		"OBSERVACIONES = ", new.observaciones,
        "ESTATUS = ", v_cadena_estatus),
        NOW(),
        DEFAULT
    );
END  

'''),

    migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER dietas_usuarios_AFTER_UPDATE AFTER UPDATE ON dietas_usuarios FOR EACH ROW BEGIN
	 -- Declaración de variables
    DECLARE v_cadena_estatus VARCHAR(15) DEFAULT NULL;
    DECLARE v_cadena_estatus2 VARCHAR(15) DEFAULT NULL;
	DECLARE v_nombre_usuario varchar(60) default null;
	DECLARE v_nombre_usuario2 varchar(60) default null;
    DECLARE v_nombre_dieta varchar(60) default null;
    DECLARE v_nombre_dieta2 varchar(60) default null;
    
	IF NEW.estatus = b'1' THEN
		SET v_cadena_estatus= "Activa";
    ELSE
		SET v_cadena_estatus= "Inactiva";
    END IF; 
    
    IF OLD.estatus = b'1' THEN
		SET v_cadena_estatus2= "Activa";
    ELSE
		SET v_cadena_estatus2= "Inactiva";
    END IF; 
    
    
    if new.usuario_id is not null then
        set v_nombre_usuario = (SELECT CONCAT_WS(" ", p.titulo_cortesia, p.nombre, p.primer_apellido, p.segundo_Apellido) FROM personas p WHERE id = NEW.usuario_id);
    else
        SET v_nombre_usuario = "Sin usuario asignado";
    end if;
    
    if old.usuario_id is not null then
        set v_nombre_usuario2 = (SELECT CONCAT_WS(" ", p.titulo_cortesia, p.nombre, p.primer_apellido, p.segundo_Apellido) FROM personas p WHERE id = old.usuario_id);
    else
        SET v_nombre_usuario2 = "Sin usuario asignado";
    end if;
	
    if new.usuario_id is not null then
        set v_nombre_dieta = (SELECT CONCAT_WS(" ", p.titulo_cortesia, p.nombre, p.primer_apellido, p.segundo_Apellido) FROM personas p WHERE id = NEW.dieta_id);
    else
        SET v_nombre_dieta = "Sin dieta asignado";
    end if;
      if new.usuario_id is not null then
        set v_nombre_dieta2 = (SELECT CONCAT_WS(" ", p.titulo_cortesia, p.nombre, p.primer_apellido, p.segundo_Apellido) FROM personas p WHERE id = NEW.dieta_id);
    else
        SET v_nombre_dieta2 = "Sin dieta asignado";
    end if;
    
    INSERT INTO bitacora VALUES(
        DEFAULT,
        USER(),
        "Update",
        "dietas",
        CONCAT_WS(" ","Se han actualizado los datos de la DIETA con el ID:",NEW.ID,
        "con los siguientes datos: ",
        "USUARIO_ID = ", v_nombre_usuario2, "cambio a ", v_nombre_usuario,
        "DIETA_ID = " , OLD.dieta_id, "cambio a ", NEW.dieta_id,
        "FECHA_ASIGNACION = ", OLD.fecha_asignacion, "cambio a ", NEW.fecha_asignacion,
        "FECHA_INICIO = ", OLD.fecha_inicio,"cambio a ", NEW.fecha_inicio,
        "FECHA_FIN = ", OLD.fecha_fin," cambio a", NEW.fecha_fin,
        "OBSERVACIONES = ", OLD.observaciones," cambio a ", NEW.observaciones,
        "ESTATUS = ", v_cadena_estatus2, " cambio a ", v_cadena_estatus),
        NOW(),
        DEFAULT       
    );
END

'''),

    migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER dietas_usuarios_AFTER_DELETE AFTER DELETE ON dietas_usuarios FOR EACH ROW BEGIN
	INSERT INTO bitacora VALUES(
		DEFAULT,
        USER(),
        "Delete",
        "dietas_usuarios",
        CONCAT_WS(" ","Se ha eliminado la relación DIETA_USUARIO con el ID: ", OLD.ID),
        now(),
        DEFAULT
    );
END

'''),

    migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER indicadores_nutricionales_AFTER_INSERT AFTER INSERT ON indicadores_nutricionales FOR EACH ROW BEGIN
	-- Insertar en la bitacora
    INSERT INTO bitacora VALUES(
        DEFAULT,
        USER(),
        "Create",
        "indicadores_nutricionales",
        CONCAT_WS(" ","Se ha insertado un nuevo INDICADOR NUTRICIONAL con el ID: ",NEW.ID, 
        "con los siguientes datos: ",
        "EDAD = ", NEW.edad,
        "IMC = ", NEW.imc,
        "CIRCUNFERENCIA DE CINTURA = ", NEW.circunferencia_cintura, 
        "NIVEL DE NUTRIENTES EN LA SANGRE = ", NEW.nivel_nutriente_sangre),
        NOW(),
        DEFAULT
    );
END

'''),

    migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER indicadores_nutricionales_AFTER_UPDATE AFTER UPDATE ON indicadores_nutricionales FOR EACH ROW BEGIN
	INSERT INTO bitacora VALUES(
        DEFAULT,
        USER(),
        "Update",
        "indicadores_nutricionales",
        CONCAT_WS(" ","Se han actualizado los datos del INDICADOR NUTRICIONAL con el ID: ",
        NEW.ID, "con los siguientes datos:",
        "EDAD = ", OLD.edad, " cambio a ", NEW.edad,
        "IMC = ", OLD.imc, " cambio a ", NEW.imc,
        "CIRCUNFERENCIA DE CINTURA = ", OLD.circunferencia_cintura, " cambio a ", NEW.circunferencia_cintura,
        "NIVEL DE NUTRIENTES EN LA SANGRE = ", OLD.nivel_nutriente_sangre, " cambio a ", NEW.nivel_nutriente_sangre),
        NOW(),
        DEFAULT       
    );
END

'''),

    migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER indicadores_nutricionales_AFTER_DELETE AFTER DELETE ON indicadores_nutricionales FOR EACH ROW BEGIN
	INSERT INTO bitacora VALUES(
		DEFAULT,
        USER(),
        "Delete",
        "indicadores_nutricionales",
        CONCAT_WS(" ","Se ha eliminado el INDICADOR NUTRICIONAL con el ID: ", OLD.ID),
        now(),
        DEFAULT
    );
END

'''),

    migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER seguimientos_dietas_usuarios_AFTER_INSERT AFTER INSERT ON seguimientos_dietas_usuarios FOR EACH ROW BEGIN
	-- Declaración de variables
    DECLARE v_nombre_empleado varchar(60) default null;
    

    if new.empleado_id is not null then
        -- En caso de tener el id del empleado responsable debemos recuperar su nombre
        set v_nombre_empleado = (SELECT CONCAT_WS(" ", p.titulo_cortesia, p.nombre, p.primer_apellido, p.segundo_Apellido) FROM personas p WHERE id = NEW.empleado_id);
    else
        SET v_nombre_empleado= "Sin empleado asignado";
    end if;

    -- Insertar en la bitacora
    INSERT INTO bitacora VALUES(
        DEFAULT,
        USER(),
        "Create",
        "dietas_usuarios",
        CONCAT_WS(" ","Se ha insertado una nueva relación DIETA USUARIO con el ID: ",NEW.dieta_usuario_id, 
        "con los siguientes datos: ",
        "DESCRIPCION = ", NEw.descripcion,
        "EMPLEADO ID = ", v_nombre_empleado,
        "ESTATUS = ", NEW.estatus,
        "PORCENTAJE AVANCE =", NEW.porcentaje_avance),
        NOW(),
        DEFAULT
    );
END

'''),

    migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER seguimientos_dietas_usuarios_AFTER_UPDATE AFTER UPDATE ON seguimientos_dietas_usuarios FOR EACH ROW BEGIN
	-- Declaración de variables
    DECLARE v_nombre_empleado varchar(60) default null;
    DECLARE v_nombre_empleado2 varchar(60) default null;

    if new.empleado_id is not null then
        -- En caso de tener el id del empleado responsable debemos recuperar su nombre
        set v_nombre_empleado = (SELECT CONCAT_WS(" ", p.titulo_cortesia, p.nombre, p.primer_apellido, p.segundo_Apellido) FROM personas p WHERE id = NEW.empleado_id);
    else
        SET v_nombre_empleado= "Sin empleado asignado";
    end if;
    
    if new.empleado_id is not null then
        -- En caso de tener el id del empleado responsable debemos recuperar su nombre
        set v_nombre_empleado2 = (SELECT CONCAT_WS(" ", p.titulo_cortesia, p.nombre, p.primer_apellido, p.segundo_Apellido) FROM personas p WHERE id = NEW.empleado_id);
    else
        SET v_nombre_empleado2 = "Sin empleado asignado";
    end if;

    -- Insertar en la bitacora
    INSERT INTO bitacora VALUES(
        DEFAULT,
        USER(),
        "Update",
        "seguimientos_dietas_usuarios",
       CONCAT_WS(" ","Se han actualizado los datos de la DIETA con el ID:",NEW.dieta_usuario_id,
        "con los siguientes datos: ",
        "DESCRIPCION = ",OLD. NEw.descripcion, "cambio a ", NEW.descripcion,
        "EMPLEADO ID = ", v_nombre_empleado,
        "ESTATUS = ", NEW.estatus, "cambio a ", NEW.estatus,
        "PORCENTAJE AVANCE =", NEW.porcentaje_avance), "cambio a ", NEW.porcentaje_avance,
        NOW(),
        DEFAULT
    );
END

'''),

    migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER seguimientos_dietas_usuarios_AFTER_DELETE AFTER DELETE ON seguimientos_dietas_usuarios FOR EACH ROW BEGIN
	INSERT INTO bitacora VALUES(
		DEFAULT,
        USER(),
        "Delete",
        "seguimientos_dietas_usuarios",
        CONCAT_WS(" ","Se ha eliminado la relación SEGUIMIENTOS_DIETAS_USUARIOS con el ID: ", OLD.dieta_usuario_id),
        now(),
        DEFAULT
    );
END

'''),

    migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER valoraciones_nutricionales_AFTER_INSERT AFTER INSERT ON valoraciones_nutricionales FOR EACH ROW BEGIN
	-- Declaración de variables
    DECLARE v_nombre_usuario varchar(60) default null;
    DECLARE v_nombre_responsable varchar(60) default null;

    -- Iniciación de las variables
    if new.empleado_id is not null then
        -- En caso de tener el id de la sucursal debemos recuperar su nombre
        set v_nombre_usuario = (SELECT CONCAT_WS(" ", p.titulo_cortesia, p.nombre, p.primer_apellido, p.segundo_Apellido) FROM personas p WHERE id = NEW.usuario_id);
    else
        SET v_nombre_usuario = "Sin usuario asignado";
    end if;
    
    if new.empleado_id is not null then
        -- En caso de tener el id del empleado responsable debemos recuperar su nombre
        set v_nombre_responsable = (SELECT CONCAT_WS(" ", p.titulo_cortesia, p.nombre, p.primer_apellido, p.segundo_Apellido) FROM personas p WHERE id = NEW.empleado_id);
    else
        SET v_nombre_responsable = "Sin empleado asignado";
    end if;

    -- Insertar en la bitacora
    INSERT INTO bitacora VALUES(
        DEFAULT,
        USER(),
        "Create",
        "valoraciones_nutricionales",
        CONCAT_WS(" ","Se ha insertado una nueva VALORACION NUTRICIONAL con el ID: ",NEW.ID, 
        "con los siguientes datos: ",
        "USUARIO ID = ",  v_nombre_usuario,
        "INDICADOR NUTRICIONAL ID = ", NEW.indicador_nutricional_id,
        "VALOR = ", NEW.valor,
        "FECHA DE VALORACIÓN = ", NEW.fecha_valoracion, 
        "EMPLEADO ID = ", v_nombre_responsable,
        "COMENTARIOS = ",NEW.comentarios ),
        NOW(),
        DEFAULT
    );
END

'''),

    migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER valoraciones_nutricionales_AFTER_UPDATE AFTER UPDATE ON valoraciones_nutricionales FOR EACH ROW BEGIN
	 -- Declaración de variables
    DECLARE v_nombre_responsable VARCHAR(100) DEFAULT NULL;
    DECLARE v_nombre_responsable2 VARCHAR(100) DEFAULT NULL;
    DECLARE v_nombre_usuario VARCHAR(60) DEFAULT NULL;
    DECLARE v_nombre_usuario2 VARCHAR(60) DEFAULT NULL;

    -- Inicialización de las variables
    IF NEW.empleado_id IS NOT NULL THEN 
		-- En caso de tener el id del empleado responsable debemos recuperar su nombre
		-- para ingresarlo en la bitacora.
		SET v_nombre_responsable = (SELECT CONCAT_WS(" ", p.titulo_cortesia, p.nombre, p.primer_apellido,p.segundo_apellido) FROM personas p WHERE id = NEW.empleado_id);
    ELSE
		SET v_nombre_responsable = "Sin empleado asignado.";
    END IF;
    
    IF OLD.empleado_id IS NOT NULL THEN 
		-- En caso de tener el id del empleado responsable debemos recuperar su nombre
		-- para ingresarlo en la bitacora.
		SET v_nombre_responsable2 = (SELECT CONCAT_WS(" ", p.titulo_cortesia, p.nombre, p.primer_apellido,
		p.segundo_apellido) FROM personas p WHERE id = OLD.empleado_id);
    ELSE
		SET v_nombre_responsable2 = "Sin empleado asignado.";
    END IF;

    IF NEW.usuario_id IS NOT NULL THEN 
		-- En caso de tener el id del usuario
		SET v_nombre_usuario = (SELECT nombre FROM sucursales WHERE id = NEW.usuario_id);
    ELSE
		SET v_nombre_usuario = "Sin usuario asignado.";
    END IF;

    IF OLD.usuario_id IS NOT NULL THEN 
		-- En caso de tener el id del usuario debemos recuperar su nombre
		-- para ingresarlo en la bitacora.
		SET v_nombre_usuario2 = (SELECT nombre FROM sucursales WHERE id = OLD.usuario_id);
    ELSE
		SET v_nombre_usuario2 = "Sin usuario asignado.";
    END IF;
    
    INSERT INTO bitacora VALUES(
        DEFAULT,
        USER(),
        "Update",
        "valoraciones_nutricionales",
        CONCAT_WS(" ","Se han actualizado los datos de la VALORACIÓN NUTRICIONAL con el ID: ",
        NEW.ID, "con los siguientes datos:",
        "USUARIO ID =",v_nombre_usuario2," cambio a ", v_nombre_usuario,
        "INDICADOR NUTRICIONAL = ", OLD.indicador_nutricional_id, " cambio a ", NEW.indicador_nutricional_id,
        "VALOR = ", OLD.valor, " cambio a ", NEW.valor,
        "FECHA DE VALORACIÓN = ", OLD.fecha_valoracion, " cambio a ", NEW.fecha_valoracion,
        "EMPLEADO ID = ", v_nombre_responsable2, " cambio a ", v_nombre_responsable,
        "COMENTARIOS = ", OLD.comentarios, " cambio a ", NEW.comentarios),
        NOW(),
        DEFAULT       
    );
END

'''),

    migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER valoraciones_nutricionales_AFTER_DELETE AFTER DELETE ON valoraciones_nutricionales FOR EACH ROW BEGIN
	INSERT INTO bitacora VALUES(
		DEFAULT,
        USER(),
        "Delete",
        "valoraciones_nutricionales",
        CONCAT_WS(" ","Se ha eliminado la VALORACIÓN NUTRICIONAL con el ID: ", OLD.ID),
        now(),
        DEFAULT
    );
END

'''),

    migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER preguntas_nutricionales_AFTER_INSERT AFTER INSERT ON preguntas_nutricionales FOR EACH ROW BEGIN
	-- Declaración de variables
    DECLARE v_nombre_usuario varchar(60) default null;
    
    -- Iniciación de las variables
    if new.persona_id is not null then
        -- En caso de tener el id del usuario debemos recuperar su nombre
        set v_nombre_usuario = (SELECT CONCAT_WS(" ", p.titulo_cortesia, p.nombre, p.primer_apellido, p.segundo_Apellido) FROM personas p WHERE id = NEW.persona_id);
    else
        SET v_nombre_usuario = "Sin usuario asignado";
    end if;
    
    INSERT INTO bitacora VALUES(
		DEFAULT,
        USER(),
        "Create",
        "preguntas_nutricionales",
        CONCAT_WS(" ","Se ha insertado una nueva Pregunta Nutricional con el ID: ",NEW.persona_ID, 
        "con los siguientes datos:  PERSONA EVALUADA  = ", NEW.persona_id,
        "COMIDAS POR DIA=", NEW.comidas_x_dia,
        "VARIEDAD DE COMIDAS = ", NEW.variedad_comidas,
        "REGULARIDAD DE CARNOHIDRATOS = ", NEW.regularidad_carbohidratos,
        "GRASA EN GRAMOS = ",  NEW.grasa_g,
        "CALORIAS CONSUMIDAS = ", NEW.calorias_consumidas),
        NOW(),
        DEFAULT
    );
END

'''),

    migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER preguntas_nutricionales_AFTER_UPDATE AFTER UPDATE ON preguntas_nutricionales FOR EACH ROW BEGIN
	 -- Declaración de variables
    DECLARE v_nombre_usuario VARCHAR(60) DEFAULT NULL;
    DECLARE v_nombre_usuario2 VARCHAR(60) DEFAULT NULL;

    -- Inicialización de las variables
    IF NEW.persona_id IS NOT NULL THEN 
		-- En caso de tener el id del usuario debemos recuperar su nombre
		-- para ingresarlo en la bitacora.
		SET v_nombre_usuario = (SELECT CONCAT_WS(" ", p.titulo_cortesia, p.nombre, p.primer_apellido,p.segundo_apellido) FROM personas p WHERE id = NEW.persona_id);
    ELSE
		SET v_nombre_usuario = "Sin persona asignada.";
    END IF;
    
    IF OLD.persona_id IS NOT NULL THEN 
		-- En caso de tener el id del usuario debemos recuperar su nombre
		-- para ingresarlo en la bitacora.
		SET v_nombre_usuario2 = (SELECT CONCAT_WS(" ", p.titulo_cortesia, p.nombre, p.primer_apellido,
		p.segundo_apellido) FROM personas p WHERE id = OLD.persona_id);
    ELSE
		SET v_nombre_usuario2 = "Sin persona asignada.";
    END IF;
    
    INSERT INTO bitacora VALUES(
        DEFAULT,
        USER(),
        "Update",
        "preguntas_nutricionales",
        CONCAT_WS(" ","Se han actualizado los datos de la PREGUNTA NUTRICIONAL con el ID: ",
        NEW.persona_ID, "con los siguientes datos:",
        "PERSONA ID =",v_nombre_usuario2," cambio a ", v_nombre_usuario,
        "COMIDAS POR DIA = ", OLD.comidas_x_dia, " cambio a ", NEW.comidas_x_dia,
        "VARIEDAD DE COMIDAS = ", OLD.variedad_comidas, " cambio a ", NEW.variedad_comidas,
        "REGULARIDAD DE CARBOHIDRATOS = ", OLD.regularidad_carbohidratos, " cambio a ", NEW.regularidad_carbohidratos,
        "GRASA EN G. = ", OLD.grasa_g, " cambio a ", NEW.grasa_g,
        "CALORIAS CONSUMIDAS = ", OLD.calorias_consumidas, " cambio a ", NEW.calorias_consumidas),
        NOW(),
        DEFAULT       
    );
END

'''),

    migrations.RunSQL('''
    CREATE DEFINER=root@localhost TRIGGER preguntas_nutricionales_AFTER_DELETE AFTER DELETE ON preguntas_nutricionales FOR EACH ROW BEGIN
	INSERT INTO bitacora VALUES(
		DEFAULT,
        USER(),
        "Delete",
        "preguntas_nutricionales",
        CONCAT_WS(" ","Se ha eliminado una AREA con el ID: ", OLD.persona_ID),
        now(),
        DEFAULT
    );
END

'''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_genera_bandera_porcentaje`(porcentaje int) RETURNS tinyint(1)
        DETERMINISTIC
    BEGIN
        DECLARE num_generado int default 0;
        DECLARE bandera BOOLEAN;
        set num_generado = fn_numero_aleatorio_rangos(0, 100);
        
        if  num_generado <= porcentaje then
            set bandera = true;
        else 
            set bandera = false;
        end if;
    return bandera;
    END
                    
    '''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_numero_aleatorio_rangos`(v_limite_inferior int, v_limite_superior int) RETURNS int
        DETERMINISTIC
    BEGIN	
        declare v_numero_generado INT 
        default floor(Rand()* (v_limite_superior - v_limite_inferior + 1) + v_limite_inferior);
        SET @numero_generado = v_numero_generado;
    RETURN v_numero_generado;
    END

    '''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_genera_titulo_cortesia`(v_genero CHAR(1) ) RETURNS varchar(20) CHARSET utf8mb4
        DETERMINISTIC
    BEGIN
    -- función de insertar personas
        declare  v_titulo varchar(20) default null;
        
        if v_genero = 'M' then
            set v_titulo = ELT(fn_numero_aleatorio_rangos(1,10), 
            "Ing.","Sr.", "Joven","Mtro.","Lic.",
            "Med.", "Sgto.", "Tnte.", "C.", "C.P.");
        else
            set v_titulo = ELT(fn_numero_aleatorio_rangos(1,10), 
            "Sra.","Srita", "Dra.","Mtra","Med.",
            "Ing.", "Lic.", "C.", "C.P.", "Pfra");
        end if;
        

    RETURN v_titulo;
    END

'''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_genera_nombre`(v_genero CHAR(1)) RETURNS varchar(60) CHARSET utf8mb4
        DETERMINISTIC
    BEGIN
        DECLARE v_nombre_generado varchar(60) default null; 
        if v_genero = 'M' THEN 
            SET v_nombre_generado = ELT (fn_numero_aleatorio_rangos(1,25),
            "Marco","Juan", "Pedro", "Alejandro","Agustin",
            "Ricardo","Gustavo", "Gerardo", "Hugo","Adalid",
            "Mario","Jesus","Yair", "Adan","Maximiliano",
            "Aldair","José","Edgar", "Jorge","Iram",
            "Carlos","Federico","Fernando","Samuel","Daniel");
        else
            SET v_nombre_generado = ELT (fn_numero_aleatorio_rangos(1,25),
            "Lorena","Maria","Luz", "Dulce","Suri",
            "Ameli","Ana","Karla","Carmen","Alondra",
            "Bertha", "Diana","Jazmin","Hortencia", "Guadalupe",
            "Estrella","Monica", "Paola","Brenda", "Flor",
            "Lucía","Sofia","Paula","Valeria","Esmeralda");
        END IF;
    RETURN v_nombre_generado;
    END

'''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_genera_Apellido`() RETURNS varchar(60) CHARSET utf8mb4
        DETERMINISTIC
    BEGIN
        DECLARE v_apellido_generado varchar(60) default null; 
        SET v_apellido_generado = ELT (fn_numero_aleatorio_rangos(1,50),
        "Hernández","García", "Martínez", "López"," González",
        "Pérez","Rodríguez", "Sánchez", "Ramírez","Cruz",
        "Cortes","Gómes","Morales", "Vázquez","Reyes",
        "Jiménez","Torres","Díaz", "Gutiérrez","Ruíz",
        "Mendoza","Aguilar","Ortiz","Moreno","Castillo",
        "Romero","Álvarez", "Méndez", "Chávez"," Rivera",
        "Juárez","Ramos", "Domínguez", "Herrera","Medina",
        "Castro","Vargas","Guzmán", "Velázquez","De la Cruz",
        "Contreras","Salazar","Luna", "Ortega","Santiago",
        "Guerrero","Estrada","Bautista","Cortés","Soto");
    RETURN v_apellido_generado;
    RETURN 1;
    END

'''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_genera_fecha_nacimiento`(fecha_inicio date, fecha_fin date) RETURNS date
        DETERMINISTIC
    BEGIN
        DECLARE min_dias INT;
        DECLARE max_dias INT;
        DECLARE dias_aleatorios INT;
        DECLARE fecha_aleatoria DATE;
        
        set min_dias = datediff(fecha_inicio, '1900-01-01');
        set max_dias = datediff(fecha_fin, '1900-01-01');
        set dias_aleatorios = fn_numero_aleatorio_rangos(min_dias, max_dias);
        set fecha_aleatoria = date_add( '1900-01-01', interval dias_aleatorios DAY);
    RETURN fecha_aleatoria;
    END
'''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_genera_sangre`() RETURNS varchar(10) CHARSET utf8mb4
        DETERMINISTIC
    BEGIN
        DECLARE v_sangre_generado varchar(10) default null; 
        SET v_sangre_generado = ELT (fn_numero_aleatorio_rangos(1,8),
        "A+","A-","B+","B-","AB+","AB-","O+","O-");
    RETURN v_sangre_generado;
    END
'''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_genera_fecha_registro`(fechaInicio date, fechaFin date, horaInicio time, horaFin time) RETURNS datetime
        DETERMINISTIC
    BEGIN
        DECLARE fechaAleatoria DATE;
        DECLARE horaEntrada time;
        DECLARE horaSalida time;   
        DECLARE horaRegistro time;
        DECLARE fechaHoraGenerada datetime;
        
        SET fechaAleatoria = date_add(fechaInicio, INTERVAL floor(rand() * (datediff(fechaFin, fechaInicio) + 1)) DAY);
        
        SET horaRegistro = addtime(horaInicio, SEC_TO_TIME(FLOOR(RAND() * TIME_TO_SEC(TIMEDIFF(horaFin, horaInicio)))));
        
        set fechaHoraGenerada = concat(fechaAleatoria, " ", horaRegistro);
    RETURN fechaHoraGenerada;
    END
'''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_numero_aleatorio_decimal`(v_limite_inferior decimal(5,2), v_limite_superior decimal(5,2)) RETURNS decimal(5,2)
    DETERMINISTIC
BEGIN	
	declare v_numero_generado decimal(5,2) 
    default (Rand()* (v_limite_superior - v_limite_inferior) + v_limite_inferior);
    SET @numero_generado = v_numero_generado;
RETURN v_numero_generado;
END
'''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_genera_nl_nutriente`() RETURNS text CHARSET utf8mb4
    DETERMINISTIC
BEGIN
	-- Declaración de variables
	DECLARE v_nl_nutriente_sangre text;
    DECLARE dato1 varchar(10);
    DECLARE dato2 varchar(10);
    DECLARE dato3 varchar(10);
    DECLARE dato4 varchar(10);
    
    -- Asignación de valores
    SET dato1 = ELT(fn_numero_aleatorio_rangos(1,12), "200","150","100","20","30","40", "50","60", "70","80","90","120");
    SET dato2 = ELT(fn_numero_aleatorio_rangos(1,12), "200","150","100","20","30","40", "50","60", "70","80","90","120");
    SET dato3 = ELT(fn_numero_aleatorio_rangos(1,12), "200","150","100","20","30","40", "50","60", "70","80","90","120");
    SET dato4 = ELT(fn_numero_aleatorio_rangos(1,12), "200","150","100","20","30","40", "50","60", "70","80","90","120");
    
	SET v_nl_nutriente_sangre= concat_ws(" ", "nivel de glucosa en la sangre:",dato1, "mg/dL", 
										  "nivel de colesterol total en la sangre:", dato2, "mg/dL",
										  "nivel de vitamina D en la sangre:",dato3, "ng/mL",
										  "nivel de hierro en la sangre:", dato4, "µg/dL");
RETURN v_nl_nutriente_sangre;
END
'''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_generar_codigo_aleatorio`(longitud INT) RETURNS varchar(255) CHARSET utf8mb4
    DETERMINISTIC
BEGIN
  DECLARE codigo_aleatorio VARCHAR(255) DEFAULT '';
  DECLARE caracteres VARCHAR(62) DEFAULT '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
  DECLARE i INT DEFAULT 0;
  
  WHILE i < longitud DO
    SET codigo_aleatorio = CONCAT(codigo_aleatorio, SUBSTRING(caracteres, FLOOR(RAND() * LENGTH(caracteres)) + 1, 1));
    SET i = i + 1;
  END WHILE;
  
  RETURN codigo_aleatorio;
END
'''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_calcular_fin`(fecha_inicio DATETIME, v_tipo_plan VARCHAR(255)) RETURNS datetime
    DETERMINISTIC
BEGIN
  DECLARE fecha_final DATETIME;

  SET fecha_final = 
    CASE v_tipo_plan
      WHEN "Anual" THEN DATE_ADD(fecha_inicio, INTERVAL 1 YEAR)
      WHEN "Semestral" THEN DATE_ADD(fecha_inicio, INTERVAL 6 MONTH)
      WHEN "Trimestral" THEN DATE_ADD(fecha_inicio, INTERVAL 3 MONTH)
      WHEN "Bimestral" THEN DATE_ADD(fecha_inicio, INTERVAL 2 MONTH)
      WHEN "Mensual" THEN DATE_ADD(fecha_inicio, INTERVAL 1 MONTH)
      WHEN "Semanal" THEN DATE_ADD(fecha_inicio, INTERVAL 1 WEEK)
      WHEN "Diaria" THEN DATE_ADD(fecha_inicio, INTERVAL 1 DAY)
      ELSE fecha_inicio
    END;

  RETURN fecha_final;
END
'''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_calcula_antiguedad`(fecha DATE) RETURNS varchar(200) CHARSET utf8mb4
    DETERMINISTIC
BEGIN
	DECLARE fecha_actual date;
    DECLARE anios INT;
    DECLARE meses INT;
    DECLARE semanas INT;
    DECLARE dias INT;
    DECLARE edad VARCHAR(200);
    
    -- Obtenemos la fecla actual
    SET fecha_actual = CURDATE();
    
    -- Calculamos la diferencia en años, mese, semanas, y dias
    SET anios = TIMESTAMPDIFF(YEAR, fecha, fecha_actual);
    SET meses = TIMESTAMPDIFF(MONTH, fecha, fecha_actual) - (12 * anios);
    SET dias = DATEDIFF(fecha_actual, DATE_ADD(fecha, INTERVAL anios YEAR) + INTERVAL meses MONTH);
    SET semanas = dias / 7;
    SET dias = dias % 7;
    
    -- Construimos el mensaje de la edad
    SET edad = concat_ws(" ", anios, "años, ", meses, "meses, ", semanas, "semanas y ", dias, "dias");
RETURN edad;
END
'''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_genera_comentarios_nutricionales`(v_cuantos INT) RETURNS text CHARSET utf8mb4
    DETERMINISTIC
BEGIN
	DECLARE i INT default 1;
	DECLARE v_comentarios TEXT;
    
    WHILE i <= v_cuantos DO
		SET v_comentarios =concat_ws("- ", v_comentarios, ELT(fn_numero_aleatorio_rangos(1,30), "Recuerda que una dieta equilibrada incluye tanto alimentos de origen animal como vegetal, No te olvides de las frutas y verduras",
																								"Asegúrate de obtener suficiente proteína de fuentes vegetales como legumbres y nueces",
																								"Esta dieta es excelente para la salud del corazón debido a su alto contenido de grasas saludables",
																								"Es importante recordar que la pérdida de peso debe ser gradual y sostenible",
																								"La fibra es esencial para la salud digestiva, intenta incluir alimentos ricos en fibra en cada comida",
																								"Las proteínas son esenciales para la reparación y el crecimiento de los tejidos, asegúrate de consumir suficiente",
																								"Aunque esta dieta es esencial para las personas con enfermedad celíaca, no necesariamente es más saludable para todos",
																								"Esta dieta es una excelente opción para las personas con presión arterial alta",
																								"Recuerda que no todos los tipos de colesterol son malos para ti, El colesterol HDL es beneficioso para la salud del corazón",
																								"Aunque esta dieta puede ayudar a perder peso, es importante recordar que algunas grasas son saludables y necesarias para el cuerpo",
																								"Intenta elegir carnes magras y pescado para reducir la ingesta de grasas saturadas",
																								"Podrías considerar tomar un suplemento de vitamina B12, ya que esta vitamina se encuentra principalmente en alimentos de origen animal",
																								"El aceite de oliva es una excelente fuente de grasas saludables en esta dieta",
																								"Recuerda que es importante centrarse en la calidad de los alimentos, no solo en las calorías",
																								"Si no estás acostumbrado a una dieta alta en fibra, aumenta la ingesta de fibra gradualmente para evitar molestias digestivas",
																								"Si estás en una dieta alta en proteínas, asegúrate de beber suficiente agua para ayudar a tus riñones a procesar la proteína extra",
																								"Asegúrate de leer las etiquetas de los alimentos, ya que el gluten puede estar oculto en muchos productos procesados",
																								"Además de seguir la dieta DASH, es importante reducir la ingesta de sal para obtener los mejores resultados",
																								"Los alimentos ricos en fibra pueden ayudar a reducir los niveles de colesterol",
																								"No todas las grasas son iguales, Las grasas monoinsaturadas y poliinsaturadas son saludables para el corazón",
																								"Incluir una variedad de alimentos en tu dieta te ayudará a obtener todos los nutrientes que necesitas",
																								"Los alimentos fortificados pueden ser una buena manera de obtener los nutrientes que podrías estar perdiendo al excluir la carne",
																								"Esta dieta también enfatiza la importancia de la actividad física y de disfrutar de las comidas con familia y amigos",
																								"No te olvides de incluir ejercicio regular en tu rutina para ayudar a crear un déficit calórico",
																								"Las frutas y verduras son excelentes fuentes de fibra y deberían ser una parte importante de tu dieta",
																								"Recuerda que es posible obtener demasiada proteína, Es importante equilibrar la ingesta de proteínas con otros nutrientes",
																								"Muchos alimentos naturales, como las frutas y verduras, son naturalmente libres de gluten",
																								"Esta dieta recomienda limitar los alimentos y bebidas azucaradas, que pueden aumentar la presión arterial",
																								"Los alimentos ricos en grasas saturadas pueden aumentar el colesterol, Intenta limitar estos alimentos en tu dieta",
																								"Recuerda que algunos alimentos bajos en grasa pueden ser altos en azúcar, Siempre es importante leer las etiquetas de los alimentos"));
		set i = i+1;
    END WHILE;
RETURN v_comentarios;
END
'''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_genera_decripcion_dieta`(v_nombre_dieta VARCHAR(50)) RETURNS text CHARSET utf8mb4
    DETERMINISTIC
BEGIN
	DECLARE v_descripcion TEXT;
    
    SET v_descripcion = 
		CASE v_nombre_dieta 
			WHEN "Dieta omnivora" THEN "Incluye una variedad de alimentos tanto de origen animal como vegetal. Esto significa que los omnívoros pueden consumir carne, pescado, aves, frutas, verduras, granos, legumbres y lácteos."
            WHEN "Dieta vegetariana" THEN "Esta dieta puede ayudarte a prevenir enfermedades, reducir el riesgo de cáncer y mejorar tu salud. Se basa en alimentos de origen vegetal y excluye la carne."
            WHEN "Dieta mediterránea" THEN "Es una alimentación equilibrada, flexible y saludable que se remonta a la década de 1950 y que se asocia a una mayor longevidad y una menor mortalidad. Incluye frutas, verduras, legumbres, pescado y aceite de oliva."
            WHEN "Dieta modificada en calorías" THEN "Esta dieta se basa en restringir el número de calorías diarias, limitando su consumo a un número inferior al que el cuerpo necesita en una jornada."
            WHEN "Dieta modificada en fibra" THEN "La dieta alta en fibra es indicada como medida preventiva del cáncer de colon, diabetes, enfermedades cardiovasculares, obesidad e hiperlipidemias. Se recomienda: 20 a 35 g al día; de los cuales 1/3 de fibra soluble y 2/3 de fibra insoluble."
            WHEN "Dieta modificada en proteína" THEN "Las dietas altas en proteínas buscan lograr un balance positivo de nitrógeno en pacientes catabólicos o con pérdida de proteínas por orina o pérdida de masa muscular. Las dietas bajas en proteína buscan lograr un balance positivo o en equilibrio."
            WHEN "Dieta libre de gluten" THEN "Esta dieta excluye el gluten, una proteína encontrada en el trigo, la cebada y el centeno, que puede causar problemas de salud en personas con enfermedad celíaca o sensibilidad al gluten."
            WHEN "Dieta DASH" THEN "Esta dieta es un plan de alimentación saludable que ayuda a bajar la presión arterial y el colesterol. Se basa en alimentos ricos en calcio, potasio, magnesio y fibra."
            WHEN "Dieta baja en colesterol" THEN "Esta dieta se enfoca en reducir la ingesta de alimentos ricos en colesterol y grasas saturadas para mejorar la salud del corazón."
            WHEN "Dieta baja en grasas" THEN "Esta dieta se basa en reducir la ingesta de alimentos ricos en grasas, como las carnes grasas, los lácteos enteros, los aceites y las frituras. La idea detrás de esta dieta es favorecer la pérdida de peso y reducir el riesgo de enfermedades del corazón."
            ELSE "La dieta no exixste"
		END;
RETURN v_descripcion;
END
'''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_genera_objetivos_dieta`(v_cuantos INT) RETURNS text CHARSET utf8mb4
    DETERMINISTIC
BEGIN
	DECLARE i INT default 1;
	DECLARE v_objetivo TEXT;
    
    WHILE i <= v_cuantos DO
		SET v_objetivo =concat_ws("- ", v_objetivo, ELT(fn_numero_aleatorio_rangos(1,37), "Permitir la flexibilidad y adaptabilidad a las preferencias personales y necesidades nutricionales.",
																	  "Proporcionar antioxidantes, fibra y otras sustancias que pueden ayudar a prevenir enfermedades crónicas.",
                                                                      "Ofrecer una amplia gama de vitaminas, minerales, proteínas, grasas y carbohidratos.",
                                                                      "Proporcionar una variedad de nutrientes esenciales para una buena salud.",
                                                                      "Bajar la presión arterial.",
                                                                      "Reducir el riesgo de cardiopatía.",
                                                                      "Reducir la posibilidad de desarrollar obesidad.",
                                                                      "Reducir la inflamación y aumentar la sensibilidad a la insulina.",
                                                                      "Mejorar la salud cardiovascular.",
                                                                      "Prevenir enfermedades crónicas que acortan la vida.",
                                                                      "Aumentar la vitalidad.",
                                                                      "Lograr un balance energético positivo.",
                                                                      "Aumentar de peso.",
                                                                      "Mantener el peso en condiciones hipermetabólicas.",
                                                                      "Ayudar a pacientes con déficit de peso corporal del 20% o más.",
                                                                      "Normalizar las deposiciones.",
                                                                      "Mantener la salud intestinal.",
                                                                      "Reducir los niveles de colesterol.",
                                                                      "Ayudar a controlar los niveles de azúcar en la sangre.",
                                                                      "Ayudar a lograr un peso saludable.",
                                                                      "Proporcionar una variedad de nutrientes esenciales para una buena salud.",
                                                                      "Ofrecer una amplia gama de vitaminas, minerales, proteínas, grasas y carbohidratos.",
                                                                      "Proporcionar antioxidantes, fibra y otras sustancias que pueden ayudar a prevenir enfermedades crónicas",
                                                                      "Permitir la flexibilidad y adaptabilidad a las preferencias personales y necesidades nutricionales.",
                                                                      "Tratamiento de la enfermedad celíaca, la sensibilidad no-celíaca al gluten y de la alergia al trigo.",
                                                                      "Mejorar la salud intestinal.",
                                                                      "Reducir los síntomas de la enfermedad celíaca y la sensibilidad al gluten.",
                                                                      "Reducir la presión arterial alta.",
                                                                      "Reducir el riesgo de enfermedades del corazón, insuficiencia cardíaca y accidentes cerebrovasculares.",
                                                                      "Ayudar a prevenir o controlar la diabetes tipo 2.",
                                                                      "Mejorar los niveles de colesterol.",
                                                                      "Reducir las probabilidades de cálculos renales.",
                                                                      "Reducir el riesgo de enfermedades del corazón.",
                                                                      "Reducir el riesgo de enfermedad cardiovascular.",
                                                                      "Reducir el consumo de alimentos procesados.",
                                                                      "Aumentar la cantidad de colesterol bueno.",
                                                                      "Prevenir la obesidad."));
		set i = i+1;
    END WHILE;
RETURN v_objetivo;
END
'''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_genera_restricciones_dieta`(v_cuantos INT) RETURNS text CHARSET utf8mb4
    DETERMINISTIC
BEGIN
	DECLARE i INT default 1;
	DECLARE v_restricciones TEXT;
    
    WHILE i <= v_cuantos DO
		SET v_restricciones =concat_ws("- ", v_restricciones, ELT(fn_numero_aleatorio_rangos(1,21), "Limitar el consumo de alimentos procesados.",
																									"Evitar la ingesta desproporcionada de carne por encima de los vegetales.",
																									"Moderar el consumo de carne en la variante flexitariana de esta dieta.",
																									"Excluir la carne de vaca, ave y pescado, y los huevos.",
																									"Evitar alimentos que contienen gelatina, un agente de espesamiento derivado del colágeno animal.",
																									"Limitar el consumo de alimentos procesados, azúcares añadidos, carnes rojas, grasas saturadas y alimentos altos en sodio.",
																									"Restringir las calorías en forma de alcohol.",
																									"Reducir la cantidad total de calorías que se consume o bebe en un día.",
																									"Evitar las pérdidas mayores de 500 g. de peso a la semana.",
																									"Evitar frutas y verduras crudas.",
																									"Evitar el trigo integral y los productos de grano integral.",
																									"Retirar todos aquellos alimentos que contengan proteínas de alto valor biológico (PAVB), en general, proteínas de origen animal.",
																									"Restringir las legumbres y los frutos secos ya que contienen una gran cantidad de proteínas.",
																									"Evitar todos los alimentos y bebidas que contengan trigo, centeno y cebada.",
																									"Evitar alimentos con demasiada sal.",
																									"Reducir la cantidad que se consume de alimentos con sal agregada (sodio) y agregar sal a las comidas.",
																									"Reducir el consumo de alcohol, bebidas azucaradas, alimentos con alto contenido de grasas saturadas.",
																									"Consumir menos de 300 mg de colesterol.",
																									"Limitar la grasa monoinsaturada a un 15-20% de la dieta.",
																									"Comer solo alimentos con 0 gramos de grasa.",
																									"No usar ningún tipo de grasa (como manteca, margarina o aceite) para preparar alimentos."));
		set i = i+1;
    END WHILE;
RETURN v_restricciones;
END
'''),

    migrations.RunSQL('''
        CREATE DEFINER=`root`@`localhost` FUNCTION `fn_genera_observaciones_dieta`(v_cuantos INT) RETURNS text CHARSET utf8mb4
    DETERMINISTIC
BEGIN
	DECLARE i INT default 1;
	DECLARE v_observaciones TEXT;
    
    WHILE i <= v_cuantos DO
		SET v_observaciones =concat_ws("- ", v_observaciones, ELT(fn_numero_aleatorio_rangos(1,20), "Incluye todo tipo de alimentos, tanto vegetales como animales.",
																									"Puede aportar todos los nutrientes necesarios para la salud del individuo si se lleva de forma correcta.",
																									"Existen dos variaciones: la dieta omnívora equilibrada y la dieta flexitariana, que consume menos cantidad de carne.",
																									"Un error habitual es la desproporcionada ingesta de carne por encima de los vegetales, lo que puede repercutir en la salud cardiovascular.",
																									"El principal desafío es obtener suficientes proteínas, hierro, calcio, zinc, vitamina B12, Omega 3 y vitamina D.",
																									"Se ha asociado a una menor prevalencia de cáncer de próstata y colon.",
																									"Tiene un poder cardioprotector y ayuda a prevenir la obesidad.",
																									"Incluye una gran cantidad de alimentos vegetales, pescados, mariscos, aves de corral, productos lácteos y huevos.",
																									"Se asocia a una mayor longevidad y prevención de enfermedades.",
																									"Es beneficiosa para la formación de musculatura con un buen entrenamiento.",
																									"La dieta alta en calorías busca lograr un balance energético positivo y aumento de peso.",
																									"La dieta baja en calorías busca producir un balance energético negativo y reducción de peso por exceso de grasa corporal.",
																									"La dieta alta en fibra es indicada como medida preventiva del cáncer de colon, diabetes, enfermedades cardiovasculares, obesidad e hiperlipidemias.",
																									"La dieta baja en fibra se indica en padecimientos inflamatorios gastrointestinales.",
																									"La dieta alta en proteínas busca lograr un balance positivo de nitrógeno en pacientes catabólicos o con pérdida de proteínas.",
																									"La dieta baja en proteína busca lograr un balance positivo o en equilibrio.",
																									"Se recomienda para personas con enfermedad celíaca o sensibilidad al gluten.",
																									"Puede contener más grasas saturadas y azúcar para mejorar el sabor y estabilidad de los alimentos.",
																									"Se enfoca en frutas y verduras frescas, alimentos ricos en calcio y potasio, y limita el sodio.",
																									"Se asocia a una mayor longevidad y ayuda a prevenir enfermedades crónicas que acortan la vida."));
		set i = i+1;
    END WHILE;
RETURN v_observaciones;
END
'''),

    migrations.RunSQL(
        '''
        CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_poblar_bd`(v_password varchar(10))
    DETERMINISTIC
BEGIN
	if v_password = "abcde" then 
		call sp_inserta_empleados(100, null);
        call sp_inserta_indicadores_nutricionales(10);
        CALL sp_inserta_membresias(20, null);
		CALL sp_inserta_membresias(20, 'Individual');
		CALL sp_inserta_membresias(10, 'Familiar');
		CALL sp_inserta_membresias(5, 'Empresarial');
	else
		select "La contraseña es incorrecta, no se poblo la BD" as Mensaje;
	end if;
END

'''),

    migrations.RunSQL(
        '''
        CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_inserta_empleados`(v_cuantos int, v_tipo varchar(15))
BEGIN
	DECLARE i INT default 1;
    DECLARE v_id_persona INT;
    DECLARE v_id_sucursal INT;
	DECLARE v_pos_sucursal INT DEFAULT 0;
    -- debemos conocer el total de sucursales activas
	DECLARE v_total_sucursales INT DEFAULT (select count(*) FROM sucursales WHERE estatus = b'1');
    
    DECLARE v_id_area INT;
    DECLARE v_pos_area INT DEFAULT 0;
    -- 
    DECLARE v_total_areas INT default null;
    DECLARE v_numero_empleados_sucursal INT default null;
	
    -- Para elegir a la sucursal a la que se le dasignara
    while i <= v_cuantos do
		-- Insertar los datos del la persona
        SET v_tipo = null;
        call sp_inserta_personas(1);
        set v_id_persona = last_insert_id();
        
        -- Determina la sucursal a la que pertenece el empleado
        sucursal:LOOP
        if v_total_sucursales > 1 then
			set v_pos_sucursal  = fn_numero_aleatorio_rangos(0, v_total_sucursales-1);
            SET v_id_sucursal = (SELECT id FROM sucursales LIMIT v_pos_sucursal,1);
            
            -- como ya se que sucursal, calcular el area a ala que le trabaja
            SET v_total_areas = (SELECT count(*) FROM areas WHERE sucursal_id = v_id_sucursal AND estatus = b'1');
            -- calcular el total de empleados de la sucursal
            SET v_numero_empleados_sucursal = (SELECT COUNT(*) FROM empleados WHERE sucursal_id = v_id_sucursal);
            
            -- si la sucursal no tiene areas, elegir una de las de la matriz
            IF v_total_areas = 0 THEN 
				set v_total_areas = (SELECT COUNT(*) FROM areas WHERE sucursal_id = 1 AND estatus = b'1');
                SET v_pos_area = fn_numero_aleatorio_rangos(0,v_total_areas-1);
                SET v_id_area = (SELECT id FROM areas WHERE  sucursal_id = 1 LIMIT v_pos_area,1);
            ELSE
				SET v_pos_area = fn_numero_aleatorio_rangos(0,v_total_areas-1);
                SET v_id_area = (SELECT id FROM areas WHERE  sucursal_id = v_id_sucursal LIMIT v_pos_area,1);
            END IF;
            LEAVE sucursal;
		ELSE 
			SELECT ("Al menos debería existir 1 sucursal") as MensajeError;
            LEAVE sucursal;
        end if;
        end loop;
        
        -- En caso de que no se diga que tipo de empleado creamos, se elige uno aleatorio
        if v_tipo IS NULL THEN
			set v_tipo = ELT(fn_numero_aleatorio_rangos(1,5), "Instructor","Administrativo","Intendecia", "Area Medicá","Directivo");
        END IF;
        
        -- Ya que se tiene todos los datos del trabajador insertar en la subentidad
        INSERT INTO empleados VALUES(v_id_persona,
									 v_tipo,
                                     v_id_area,
                                     v_numero_empleados_sucursal+1,
                                     v_id_sucursal,
                                     fn_genera_fecha_registro("2015-01-01", CURDATE(), "08:00:00", "20:00:00"));
        
		set i = i+1;
    end while;
END
'''),

    migrations.RunSQL(
        '''
        CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_inserta_personas`(v_cuantos INT)
    DETERMINISTIC
BEGIN
	DECLARE i INT DEFAULT 1;
    DECLARE v_genero CHAR(1) default NULL;
    
    DECLARE v_titulo_porcentaje boolean DEFAULT NULL;
    declare  v_titulo varchar(20) default null;
    
    DECLARE v_fecha_actual DATE;
    DECLARE v_fecha_limite_16 DATE;
    DECLARE v_fecha_limite_65 DATE;
    declare v_fecha_inicio_registro date;
    declare v_fecha_fin_registro date;
    DECLARE v_horario_inicio_registro TIME;
    DECLARE v_horario_fin_registro TIME;
    
    set v_fecha_actual = curdate();
    set v_fecha_limite_16 = date_sub(v_fecha_actual, INTERVAL 16 YEAR);
	set v_fecha_limite_65 = date_sub(v_fecha_actual, INTERVAL 65 YEAR);
    
    -- considerando que el gimnasio empezo a funcionar el 01 de Enero de 2020 y que continua en operación
    SET v_fecha_inicio_registro = "2020-01-01";
    SET v_fecha_fin_registro = curdate();
    -- considera que el área de membresias 
    set v_horario_inicio_registro = "08:00:00";
    set v_horario_fin_registro = "20:00:00";
    
    while i <= v_cuantos DO
		set v_titulo_porcentaje= fn_genera_bandera_porcentaje(20);
        SET v_genero = ELT (fn_numero_aleatorio_rangos(1,2),"M","F");
        if v_titulo_porcentaje then
			set v_titulo = fn_genera_titulo_cortesia(v_genero);
		end if;
        
		INSERT INTO personas VALUES (
		default,
		v_titulo,
		fn_genera_nombre(v_genero),
		fn_genera_Apellido(),
		fn_genera_Apellido(),
        fn_genera_fecha_nacimiento(v_fecha_limite_65,v_fecha_limite_16),
		null,
		v_genero,
		fn_genera_sangre(),
		default,
		fn_genera_fecha_registro(v_fecha_inicio_registro, v_fecha_fin_registro, v_horario_inicio_registro,v_horario_fin_registro),
		NULL);
        set v_titulo = null;
        SET i = i +1;
	END while;
END
'''),

    migrations.RunSQL(
        '''
        CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_inserta_indicadores_nutricionales`(v_cuantos INT)
    DETERMINISTIC
BEGIN
	 -- Declaración de variables
    DECLARE i INT default 1;
    DECLARE v_edad int unsigned default 0;
    DECLARE v_imc decimal(5,3) default 0.0;
    DECLARE v_peso decimal(5,2) default 0.0;
    DECLARE v_altura decimal(5,2) default 0.0;
    DECLARE v_circunferencia_cintura decimal(5,2) default 0.0;
    DECLARE v_nl_nutriente_sangre TEXT default null;
    
    while i <= v_cuantos do
        
		set v_edad = fn_numero_aleatorio_rangos(16,50);
        
        SET v_peso = fn_numero_aleatorio_decimal(60.0,130.0);
        SET v_altura = fn_numero_aleatorio_decimal(1.5,2.15);
        
        set v_imc = (v_peso)/(v_altura*v_altura);
        
        set v_circunferencia_cintura = fn_numero_aleatorio_decimal(60.0,130.0);
        
        set v_nl_nutriente_sangre = fn_genera_nl_nutriente();
        
		insert into indicadores_nutricionales values (
			default,
            v_edad,
            v_imc,
            v_circunferencia_cintura,
            v_nl_nutriente_sangre
        );
		set i = i+1;
    END WHILE;
END
'''),

    migrations.RunSQL(
        '''
        CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_inserta_membresias`(v_cuantos INT, v_tipo varchar(20))
    DETERMINISTIC
BEGIN
	 -- Declaración de variables
    DECLARE i INT default 1;
    DECLARE v_id_persona INT;
	DECLARE v_lim_miembros INT;
    DECLARE v_id_membresia INT;
    DECLARE v_tipo_servicios VARCHAR(10);
    DECLARE v_tipo_plan VARCHAR(10);
    DECLARE v_nivel VARCHAR(10);
    DECLARE v_codigo varchar(50);
    DECLARE v_aleatorio BIT DEFAULT b'0';
    DECLARE v_fecha_inicio datetime default NULL;
    DECLARE v_fecha_fin DATETIME default NULL;
    DECLARE v_fecha_registro DATETIME DEFAULT NULL;
    
    -- Determinar si la membresia creada sera aleatoria
    IF v_tipo IS NULL THEN
		SET v_aleatorio = b'1';
    END IF;
    
    while i <= v_cuantos do
		IF v_aleatorio = b'1' THEN
            set v_tipo = ELT(fn_numero_aleatorio_rangos(1,3), "Individual","Familiar","Empresarial");
        END IF;
        
        SET v_tipo_servicios = NULL;
		SET v_tipo_plan = NULL;
		SET v_nivel = NULL;
        SET v_codigo = NULL;
        
        -- INSERTAR EN MEMBRESIAS, LUEGO PERSONAS, LUEGO USUARIOS, TAL VEZ EN MIEMBROS, MEMBRESIAS_USUARIOS
        
        CASE v_tipo
		  WHEN "Individual" THEN SET v_lim_miembros=1;
		  WHEN "Familiar" THEN SET v_lim_miembros= fn_numero_aleatorio_rangos(1,5);
		  WHEN "Empresarial" THEN SET v_lim_miembros = fn_numero_aleatorio_rangos(10,50);
          ELSE SET  v_lim_miembros=1;
		END case;
        
        -- Calcular el servicio aleoatoriamente
        if v_tipo_servicios IS NULL THEN
			set v_tipo_servicios = ELT(fn_numero_aleatorio_rangos(1,4), "Basicos","Completa","Coaching", "Nutriólogo");
        END IF;
        
        -- Calcular el codigo aleatoriamente
        IF v_codigo IS NULL THEN
			SET v_codigo = fn_generar_codigo_aleatorio(50);
        END IF;
        
        -- Calcular el plan aleatoriamente
        if v_tipo_plan IS NULL THEN
			set v_tipo_plan = ELT(fn_numero_aleatorio_rangos(1,7), "Anual","Semestral","Trimestral", "Bimestral", "Mensual", "Semanal", "Diaria");
        END IF;
        
        -- Calculamos la fecha de inicio de la membresia
        set v_fecha_registro = fn_genera_fecha_registro("2015-01-01", CURDATE(), "08:00:00", "20:00:00");
        
        -- Culamos la fecha del fin de la membresia
        SET v_fecha_fin = fn_calcular_fin(v_fecha_registro, v_tipo_plan);
        
        -- Calcular el nivel aleatoriamente
        if v_nivel IS NULL THEN
			set v_nivel = ELT(fn_numero_aleatorio_rangos(1,4), "Nuevo","Plata","Oro", "Diamante");
        END IF;
        
        -- Ingresamos la fecha de registro
        SET v_fecha_inicio = v_fecha_registro;
        
		-- Ya que se tiene todos los datos del usuario se inserta en la subentidad
        INSERT INTO membresias VALUES (default,
									   v_codigo,
									   v_tipo,
									   v_tipo_servicios,
									   v_tipo_plan,
                                       v_nivel,
                                       v_fecha_inicio,
                                       v_fecha_fin,
                                       default,
                                       v_fecha_registro,
                                       null);

		-- Obtenemos el ID de la membresia
		set v_id_membresia = last_insert_id();

        -- Insertamos en las relaciones
        call sp_inserta_membresias_usuarios(v_lim_miembros,v_id_membresia);

		set i = i+1;
    END WHILE;
END
'''),

    migrations.RunSQL(
        '''
        CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_inserta_membresias_usuarios`(v_cuantos int,v_id_membresia int)
    DETERMINISTIC
BEGIN
	-- Declaración de variables
    DECLARE i INT default 1;
    DECLARE v_id_usuario int;
	DECLARE v_fecha_conexion DATETIME;
    DECLARE v_tipo_servicios varchar(10);
    SET v_tipo_servicios = (SELECT tipo_servicios FROM membresias WHERE ID = v_id_membresia);
    
    while i <= v_cuantos do
		call sp_inserta_miembros(1, null);
		set v_id_usuario = last_insert_id();
		-- Revisando la fecha de la ultima conexión
		SET v_fecha_conexion = (SELECT ultima_conexion from usuarios where persona_id = v_id_usuario );
        
		-- Insertar los datos
		INSERT INTO membresias_usuarios values (v_id_membresia,
												v_id_usuario,
												v_fecha_conexion,
												default);
		
        -- Insertando en valoraciones nutricionales y preguntas nutricionales si la membresia es 'Completa' o 'Nutriólogo'
        if v_tipo_servicios ='Completa' OR v_tipo_servicios ='Nutriólogo' then
			CALL sp_inserta_valoraciones_nutricionales(1,v_id_usuario);
            call sp_inserta_preguntas_nutricionales(1,v_id_usuario);
        end if;
		set i = i+1;
    END WHILE;
END
'''),

    migrations.RunSQL(
        '''
        CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_inserta_miembros`(v_cuantos int, v_tipo varchar(15))
BEGIN
    -- Declaración de variables
    DECLARE i INT default 1;
    DECLARE v_id_persona INT;
    DECLARE v_tiempo DATETIME;
    DECLARE v_antiguedad VARCHAR(80);
    
    -- debemos conocer el total de personas activas
    DECLARE v_total_personas INT DEFAULT (select count(*) FROM personas WHERE estatus = b'1');
    
	while i <= v_cuantos do
		SET v_tipo = NULL;
        SET v_tiempo = NULL;
		
        -- obtener un id que no este repetido
        
        call sp_inserta_usuarios(1, null);
        set v_id_persona = last_insert_id();
        
        -- En caso de que no se diga que tipo de miembro creamos, se elige uno aleatorio
        if v_tipo IS NULL THEN
            set v_tipo = ELT(fn_numero_aleatorio_rangos(1,5), "Frecuente","Ocasional","Nuevo", "Esporádico","Una sola visita");
        END IF;
        
        personas:LOOP
        SET v_tiempo = (SELECT Fecha_Registro FROM personas WHERE ID=v_id_persona); 
		
		if TIMESTAMPDIFF(YEAR,v_tiempo,CURDATE()) < 1 THEN 
			SET v_antiguedad = concat_ws(" ", 'Miembro nuevo con ',fn_calcula_antiguedad(v_tiempo) );
            LEAVE personas;
		ELSEIF TIMESTAMPDIFF(YEAR,v_tiempo,CURDATE()) BETWEEN 1 AND 3 THEN 
			SET v_antiguedad = concat_ws(" ", 'Miembro regular con ',fn_calcula_antiguedad(v_tiempo) );
            LEAVE personas;
		ELSE 
			SET v_antiguedad = concat_ws(" ", 'Miembro antiguo con ',fn_calcula_antiguedad(v_tiempo) );
            LEAVE personas;
        END IF;
        END LOOP;

        -- Ya que se tiene todos los datos del usuario se inserta en la subentidad
        INSERT INTO miembros VALUES (v_id_persona,
									 v_tipo,
                                     default,
                                     v_antiguedad);
		set i = i+1;
    END WHILE;
END
'''),

    migrations.RunSQL(
        '''
        CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_inserta_usuarios`(v_cuantos int, v_tipo varchar(15))
    DETERMINISTIC
BEGIN
	DECLARE i INT default 1;
    DECLARE v_aleatorio BIT default b'0';
    DECLARE v_estatus_conexion varchar(50) DEFAULT NULL;
    DECLARE v_id_persona INT;
    DECLARE v_password varbinary(256);
    DECLARE v_username varchar(60);
    
    IF v_tipo IS NULL THEN
		SET v_aleatorio = b'1';
    END IF;
    
    while i <= v_cuantos do
		-- SELECT concat("Entrando en el ciclo #", i) as MensajeError;
		IF v_aleatorio = b'1' then
			SET v_tipo = null;
			SET v_estatus_conexion = NULL;
		END IF;
		
		call sp_inserta_personas(1);
		set v_id_persona = last_insert_id();
		
		-- En caso de que no se diga que tipo de empleado creamos, se elige uno aleatorio
		if v_tipo IS NULL THEN
			set v_tipo = ELT(fn_numero_aleatorio_rangos(1,4), "Empleado","Visitante","Miembro", "Instructor");
		END IF;
		
		-- En caso de que no se diga la ultima conexión, se elige uno aleatorio
		if v_estatus_conexion IS NULL THEN
			set v_estatus_conexion = ELT(fn_numero_aleatorio_rangos(1,3), "Online","Offline","Banned");
		END IF;
        
        -- Crear el nombre del usuario
        SET v_username =concat_ws("_", (SELECT SUBSTRING(Nombre, 1, 4) FROM personas WHERE v_id_persona =id), v_id_persona, ELT(fn_numero_aleatorio_rangos(1,7), '*','@','?','-','+','/','}'));
		
        -- Asignar una contraseña
		SET v_password = concat_ws("_", (SELECT SUBSTRING(Nombre, 1, 4) FROM personas WHERE v_id_persona =id),  v_id_persona );
        
		-- Ya que se tiene todos los datos del trabajador insertar en la subentidad
		INSERT INTO usuarios VALUES(v_id_persona,
									 v_password,
									 v_tipo,
									 v_estatus_conexion,
									 fn_genera_fecha_registro( (SELECT fecha_registro FROM personas WHERE id= v_id_persona), CURDATE(), "08:00:00", "20:00:00"),
                                     v_username);
		set i = i+1;
    END WHILE;
END
'''),

    migrations.RunSQL(
        '''
        CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_inserta_valoraciones_nutricionales`(v_cuantos int,v_id_usuario int)
    DETERMINISTIC
BEGIN
	-- Declaración de variables
    DECLARE i INT default 1;
    DECLARE v_id_ind_nutricional INT UNSIGNED;
    DECLARE v_valor VARCHAR(20);
    DECLARE v_id_empleado INT UNSIGNED;
    DECLARE v_comentarios TEXT;
    DECLARE v_pos_ind_nut INT DEFAULT 0;
    DECLARE v_pos_empleado INT DEFAULT 0;
    DECLARE v_id_dieta_usuario INT unsigned;
    
    -- debemos conocer el total de indicadores nutricionales
	DECLARE v_total_ind_nutri INT DEFAULT (select count(*) FROM indicadores_nutricionales);    
    
    -- debemos conocer el total de nutriologos
    DECLARE v_total_nutriologos INT DEFAULT (select count(*) FROM empleados WHERE Puesto = 'Area Medicá');
    
    while i <= v_cuantos do
		-- Obtener un registro de la tabla catalogo indicador nutricional
        indicadores_nutricionales:LOOP
        if v_total_ind_nutri > 1 then
			set v_pos_ind_nut  = fn_numero_aleatorio_rangos(0, v_total_ind_nutri-1);
            SET v_id_ind_nutricional = (SELECT id FROM indicadores_nutricionales LIMIT v_pos_ind_nut,1);
            LEAVE indicadores_nutricionales;
		ELSE 
			SELECT ("Al menos debería existir 1 indicador nutricional") as MensajeError;
            LEAVE indicadores_nutricionales;
        end if;
        end loop;
        
        -- Asignamos el valor
        SET v_valor = ELT(fn_numero_aleatorio_rangos(1,2), "Adecuado","Inadecuado");
        
		-- Obtener un empleado que sea nutriologo
        empleados:LOOP
        if v_total_nutriologos > 1 then
			set v_pos_empleado  = fn_numero_aleatorio_rangos(0, v_total_nutriologos-1);
            SET v_id_empleado = (SELECT persona_id FROM empleados LIMIT v_pos_empleado,1);
            LEAVE empleados;
		ELSE 
			SELECT ("Al menos debería existir 1 empleado del area medica") as MensajeError;
            LEAVE empleados;
        end if;
        end loop;
        
		-- Asignamos los comentarios
		SET v_comentarios = fn_genera_comentarios_nutricionales(fn_numero_aleatorio_rangos(1,5));
        
		-- Insertar los datos
		INSERT INTO valoraciones_nutricionales values (default,
													   v_id_usuario,
													   v_id_ind_nutricional,
													   v_valor,
													   NOW(),
													   v_id_empleado,
													   v_comentarios);
		-- Insertando en la relación dietas usuarios
        CALL sp_inserta_dietas_usuarios(1,v_id_usuario);
        SET v_id_dieta_usuario = last_insert_id();
        -- Insertando en el seguimiento de dietas usuarios
        CALL sp_inserta_seguimientos_dietas_usuarios(1,v_id_dieta_usuario);
        set i = i+1;
    END WHILE;
END
'''),

    migrations.RunSQL(
        '''
        CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_inserta_dietas_usuarios`(v_cuantos int,v_id_usuario int)
    DETERMINISTIC
BEGIN
	-- Declaración de variables
    DECLARE i INT default 1;
    DECLARE v_id_dieta INT;
	DECLARE v_fecha_asignacion DATETIME;
    DECLARE v_fecha_inicio DATETIME;
    DECLARE v_fecha_fin DATETIME;
    DECLARE v_observaciones TEXT;
    
    while i <= v_cuantos do
		-- Insertando la dieta
		call sp_inserta_dieta(1, null);
		set v_id_dieta = last_insert_id();
		
        -- Obtenemos la fecha de asignacion de la dieta
        set v_fecha_asignacion = (SELECT m.Fecha_Registro 
								  FROM membresias m
								  INNER JOIN membresias_usuarios mu ON m.ID = mu.Membresia_ID
								  WHERE mu.Usuarios_ID = v_id_usuario);
        
        -- Obtenemos la fecha del inicio de la dieta
        SET v_fecha_inicio = (SELECT m.Fecha_Inicio 
							  FROM membresias m
							  INNER JOIN membresias_usuarios mu ON m.ID = mu.Membresia_ID
						      WHERE mu.Usuarios_ID = v_id_usuario);
                              
        -- Obtenemos la fecha del fin de la dieta
        SET v_fecha_fin = (SELECT m.Fecha_Fin 
						   FROM membresias m
						   INNER JOIN membresias_usuarios mu ON m.ID = mu.Membresia_ID
						   WHERE mu.Usuarios_ID = v_id_usuario);
                              
        -- Asignando las onservaciones
        SET v_observaciones = fn_genera_observaciones_dieta(fn_numero_aleatorio_rangos(1,5));
        
		-- Insertar los datos
		INSERT INTO dietas_usuarios values (default,
											v_id_usuario,
											v_id_dieta,
											v_fecha_asignacion,
											v_fecha_inicio,
											v_fecha_fin,
											v_observaciones,
											default);
		set i = i+1;
    END WHILE;
END
'''),

    migrations.RunSQL(
        '''
        CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_inserta_dieta`(v_cuantos int,v_nombre VARCHAR(300))
    DETERMINISTIC
BEGIN
	-- Declaración de variables
    DECLARE i INT default 1;
	DECLARE v_descripcion TEXT;
    DECLARE v_objetivo TEXT;
    DECLARE v_restricciones TEXT;
	DECLARE v_aleatorio BIT DEFAULT b'0';
    
    -- Determinar si la dieta creada sera aleatoria
    IF v_nombre IS NULL THEN
		SET v_aleatorio = b'1';
    END IF;
    
    while i <= v_cuantos do
		IF v_aleatorio = b'1' THEN
			SET v_nombre = fn_genera_nombre_dieta();
		END IF;
        
		-- Obteniendo la descripción dependiendo de la dieta
		SET v_descripcion = fn_genera_decripcion_dieta(v_nombre);
        
        -- Asignando los objetivos de las dietas
        SET v_objetivo = fn_genera_objetivos_dieta(fn_numero_aleatorio_rangos(1,6));
        
        -- Asignando las restricciones de las dietas
        SET v_restricciones = fn_genera_restricciones_dieta(fn_numero_aleatorio_rangos(1,4));
        
		-- Insertar los datos
		INSERT INTO dietas values (default,
								   v_nombre,
								   v_descripcion,
                                   v_objetivo,
                                   v_restricciones,
								   default);
		set i = i+1;
    END WHILE;
END
'''),

    migrations.RunSQL(
        '''
        CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_inserta_seguimientos_dietas_usuarios`(v_cuantos int,v_id_dieta_usuario int)
    DETERMINISTIC
BEGIN
	-- Declaración de variables
    DECLARE i INT default 1;
    DECLARE v_descripcion TEXT;
    DECLARE v_id_empleado int UNSIGNED;
	DECLARE v_estatus VARCHAR(20);
    DECLARE v_por_avance VARCHAR(20);
    
    while i <= v_cuantos do
		-- Obtenemos la descripción
         SET v_descripcion = (SELECT d.descripccion 
							  FROM dietas d 
                              INNER JOIN dietas_usuarios du ON du.dieta_id = d.id
                              WHERE du.id = v_id_dieta_usuario);
                              
		-- Obtenemos el id del empleado
         SET v_id_empleado = (SELECT vn.empleado_id 
							  FROM valoraciones_nutricionales vn
							  INNER JOIN dietas_usuarios du ON du.usuario_id = vn.usuario_id
                              WHERE du.id = v_id_dieta_usuario);
                              
		-- Calculamos un el estatus aleatorio
		SET v_estatus = ELT(fn_numero_aleatorio_rangos(1,5),'Programada','Iniciada','Seguimiento','Suspendida','Finalizada' );
        
		-- Calculamos un avance aleatorio
		SET v_por_avance = ELT(fn_numero_aleatorio_rangos(1,10), '0% a 10%','11% a 20%','21% a 30%','31% a 40%','41% a 50%','51% a 60%','61% a 70%','71% a 80%','81% a 90%','91% a 100%');
        
		-- Insertar los datos
		INSERT INTO seguimientos_dietas_usuarios values (v_id_dieta_usuario,
														 v_descripcion,
														 v_id_empleado,
														 v_estatus,
														 v_por_avance);
		set i = i+1;
    END WHILE;
END
'''),

    migrations.RunSQL(
        '''
        CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_inserta_preguntas_nutricionales`(v_cuantos INT, v_persona_id INT UNSIGNED)
    DETERMINISTIC
BEGIN
	 -- Declaración de variables
    DECLARE i INT default 1;
    DECLARE v_comidas_x_dia VARCHAR(10);
    DECLARE v_variedad_comidas VARCHAR(20);
    DECLARE v_regularidad_carbohidratos VARCHAR(20);
    DECLARE v_grasa_g VARCHAR(13);
    DECLARE v_calorias_consumidas VARCHAR(20);
    
    while i <= v_cuantos do
		set v_comidas_x_dia = ELT(fn_numero_aleatorio_rangos(1,4), "2","3","4", "5 o mas");
        
        set v_variedad_comidas = ELT(fn_numero_aleatorio_rangos(1,4), 'Nunca','Algunas Veces','Normalmente','Siempre');
        
        set v_regularidad_carbohidratos = ELT(fn_numero_aleatorio_rangos(1,4), 'Nunca','Algunas Veces','Normalmente','Siempre');
        
        set v_grasa_g = ELT(fn_numero_aleatorio_rangos(1,4),'10g','30g','60g','100g o mas');
        
        set v_calorias_consumidas = ELT(fn_numero_aleatorio_rangos(1,4),'Menos de 1000 Kcal','1000 Kcal','1500 Kcal','2000 Kcal','2500 Kcal','3000 Kcal','3500 Kcal','4000 Kcal','Mas de 4000 Kcal');
        
		insert into preguntas_nutricionales values (
			v_persona_id,
            v_comidas_x_dia,
            v_variedad_comidas,
            v_regularidad_carbohidratos,
            v_grasa_g,
            v_calorias_consumidas
        );
		set i = i+1;
    END WHILE;
END
'''),

    migrations.RunSQL(
        '''
        CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_limpia_bd`(v_password varchar(10))
    DETERMINISTIC
BEGIN
	if v_password = "abcde" then 
		-- Antes de poder eliminart a las personas tengo que asegurarme que ninguna sucurse
        UPDATE sucursales set responsable_id = null;
        
        -- Eliminamos las valoraciones nutricionales
        DELETE FROM valoraciones_nutricionales;
        ALTER TABLE valoraciones_nutricionales AUTO_INCREMENT = 1;
        
        -- Eliminamos las valoraciones nutricionales
        DELETE FROM indicadores_nutricionales;
        ALTER TABLE indicadores_nutricionales AUTO_INCREMENT = 1;
        
        -- Eliminamos el seguimientos de dietas usuarios
        delete from seguimientos_dietas_usuarios;
        
        -- Eliminamos las dietas usuarios
        delete from dietas_usuarios;
        ALTER TABLE dietas_usuarios AUTO_INCREMENT = 1;
        
		-- Eliminamos las dietas
        delete from dietas;
        ALTER TABLE dietas AUTO_INCREMENT = 1;
        
        -- eliminamos las preguntas nutricionales 
        delete from preguntas_nutricionales;
        
        -- Despues de haber eliminado a los responsables de las sucursales, eliminamos a los empleados
        delete from empleados;
        
        -- elinamos las membresias_usuarios
        delete from membresias_usuarios;
        
        -- eliminamos los mienbros 
        delete from miembros;
        
        -- eliminamos las membresias 
        delete from membresias;
        ALTER TABLE membresias AUTO_INCREMENT = 1;
        
        -- eliminamos los usuarios 
        delete from usuarios;
        
        -- entonces procedemos alimpiar a las personas
		delete from personas;
        ALTER TABLE personas AUTO_INCREMENT = 1;
	else
		select "La contraseña es incorrecta" as Mensaje;
	end if;
END
'''),

    migrations.RunSQL(
        '''
        CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_estatus_bd`(v_password varchar(10))
    DETERMINISTIC
BEGIN
	if v_password = "abcde" then 
		(SELECT "dietas" as Tabla, "Devil", (SELECT COUNT(*) FROM dietas))
        UNION
        (SELECT "dietas_usuarios" as Tabla, "Devil, Derivada", (SELECT COUNT(*) FROM dietas_usuarios))
        UNION
        (SELECT "empleados" as Tabla, "Débil", (SELECT COUNT(*) FROM empleados))
        UNION
        (SELECT "indicadores_nutricionales" as Tabla, "Fuerte, Catálogo", (SELECT COUNT(*) FROM indicadores_nutricionales))
        UNION
        (SELECT "membresias" as Tabla, "Débil", (SELECT COUNT(*) FROM membresias))
        UNION
        (SELECT "membresias_usuarios" as Tabla, "Débil, Derivada", (SELECT COUNT(*) FROM membresias_usuarios))
        UNION
        (SELECT "miembros" as Tabla, "Débil", (SELECT COUNT(*) FROM miembros))
        UNION
        (SELECT "personas" as Tabla, "Fuerte", (SELECT COUNT(*) FROM personas))
        UNION
        (SELECT "preguntas_nutricionales" as Tabla, "Fuerte, Catálogo", (SELECT COUNT(*) FROM preguntas_nutricionales))
        UNION
        (SELECT "seguimientos_dietas_usuarios" as Tabla, "Devil", (SELECT COUNT(*) FROM seguimientos_dietas_usuarios))
        UNION
        (SELECT "sucursales" as Tabla, "Débil, Catálogo", (SELECT COUNT(*) FROM sucursales))
        UNION
        (SELECT "usuarios" as Tabla, "Débil", (SELECT COUNT(*) FROM usuarios))
        UNION
        (SELECT "valoraciones_nutricionales" as Tabla, "Devil, Derivada", (SELECT COUNT(*) FROM valoraciones_nutricionales))
        UNION
        (SELECT "bitacora" as Tabla, "Isla", (SELECT COUNT(*) FROM bitacora));
	else
		select "La contraseña es incorrecta, no puedo mostrar el estatus de la BD" as Mensaje;
	end if;
END
'''),

    migrations.RunSQL(
        '''
        ALTER TABLE dietas
        MODIFY COLUMN ID int unsigned NOT NULL AUTO_INCREMENT COMMENT 'Descripción: Identificador único de la dieta.\nTipo: Numérico (Entero)\nNaturaleza: Cuantitativo\nDominio: Números enteros positivos\nComposición: Autoincremental.',
        MODIFY COLUMN Nombre varchar(300) NOT NULL COMMENT 'Descripción: Nombre de la dieta.\nTipo: Alfanumérico\nNaturaleza: Cualitativo\nDominio: Texto con hasta 300 caracteres.',
        MODIFY COLUMN Descripccion text COMMENT 'Descripción: Descripción detallada de la dieta.\nTipo: Alfanumérico (Texto)\nNaturaleza: Cualitativo\nDominio: Texto.',
        MODIFY COLUMN Objetivo text COMMENT 'Descripción: Objetivo de la dieta.\nTipo: Alfanumérico (Texto)\nNaturaleza: Cualitativo\nDominio: Texto.',
        MODIFY COLUMN Restricciones text COMMENT 'Descripción: Restricciones de la dieta.\nTipo: Alfanumérico (Texto)\nNaturaleza: Cualitativo\nDominio: Texto.',
        MODIFY COLUMN Estatus bit(1) NOT NULL DEFAULT b'1' COMMENT 'Descripción: Estatus de la dieta.\nTipo: Binario (Bit)\nNaturaleza: Cualitativo\nDominio: 0 para inactivo, 1 para activo.'

'''),


    migrations.RunSQL(
        '''
        ALTER TABLE dietas
        COMMENT 'OWNER: Nutrición\\nCARGADA POR: Adalid, Aldair, Emilio\\nClasificación del Tipo de Tabla: Dévil\\nDescripción de la Tabla: Esta tabla almacena información sobre las dietas disponibles en el sistema. Contiene el nombre de la dieta, descripción, objetivo, restricciones y el estado de la dieta.'

'''),

    migrations.RunSQL(
        '''
        ALTER TABLE dietas_usuarios
        MODIFY COLUMN id int unsigned NOT NULL AUTO_INCREMENT COMMENT 'Descripción: Identificador único de la asignación de dieta a usuario.\nTipo: Numérico (Entero)\nNaturaleza: Cuantitativo\nDominio: Números enteros positivos\nComposición: Autoincremental.',
        MODIFY COLUMN usuario_id int unsigned DEFAULT NULL COMMENT 'Descripción: ID del usuario al que se asigna la dieta.\nTipo: Numérico (Entero)\nNaturaleza: Cuantitativo\nDominio: Números enteros positivos.',
        MODIFY COLUMN dieta_id int unsigned DEFAULT NULL COMMENT 'Descripción: ID de la dieta asignada al usuario.\nTipo: Numérico (Entero)\nNaturaleza: Cuantitativo\nDominio: Números enteros positivos.',
        MODIFY COLUMN fecha_asignacion datetime DEFAULT NULL COMMENT 'Descripción: Fecha y hora de asignación de la dieta al usuario.\nTipo: Fecha y hora\nNaturaleza: Cuantitativo\nDominio: Valores de fecha y hora válidos.',
        MODIFY COLUMN fecha_inicio datetime DEFAULT NULL COMMENT 'Descripción: Fecha y hora de inicio de la dieta para el usuario.\nTipo: Fecha y hora\nNaturaleza: Cuantitativo\nDominio: Valores de fecha y hora válidos.',
        MODIFY COLUMN fecha_fin datetime DEFAULT NULL COMMENT 'Descripción: Fecha y hora de fin de la dieta para el usuario.\nTipo: Fecha y hora\nNaturaleza: Cuantitativo\nDominio: Valores de fecha y hora válidos.',
        MODIFY COLUMN observaciones text COMMENT 'Descripción: Observaciones adicionales sobre la asignación de la dieta.\nTipo: Alfanumérico (Texto)\nNaturaleza: Cualitativo\nDominio: Texto.',
        MODIFY COLUMN estatus bit(1) DEFAULT b'1' COMMENT 'Descripción: Estatus de la asignación de la dieta.\nTipo: Binario (Bit)\nNaturaleza: Cualitativo\nDominio: 0 para inactivo, 1 para activo.'

'''),


    migrations.RunSQL(
        '''
        ALTER TABLE dietas_usuarios
        COMMENT 'OWNER: Nutrición\\nCARGADA POR: Adalid, Aldair, Emilio\\nClasificación del Tipo de Tabla:Dévil, Derivada\\nDescripción de la Tabla: Esta tabla almacena las relaciones entre los usuarios y las dietas asignadas. Contiene información sobre el usuario al que se asigna la dieta, la dieta asignada, las fechas de asignación, inicio y fin de la dieta, observaciones adicionales y el estado de la asignación.'

'''),

     migrations.RunSQL(
        '''
         ALTER TABLE indicadores_nutricionales
        MODIFY COLUMN id int unsigned NOT NULL AUTO_INCREMENT COMMENT 'Descripción: Identificador único del indicador nutricional.\nTipo: Numérico (Entero)\nNaturaleza: Cuantitativo\nDominio: Números enteros positivos\nComposición: Autoincremental.',
        MODIFY COLUMN Edad int unsigned DEFAULT NULL COMMENT 'Descripción: Edad del usuario para el cálculo de los indicadores.\nTipo: Numérico (Entero)\nNaturaleza: Cuantitativo\nDominio: Números enteros positivos.',
        MODIFY COLUMN IMC decimal(5,3) DEFAULT NULL COMMENT 'Descripción: Índice de Masa Corporal del usuario.\nTipo: Numérico (Decimal)\nNaturaleza: Cuantitativo\nDominio: Números decimales positivos.',
        MODIFY COLUMN circunferencia_cintura decimal(5,2) DEFAULT NULL COMMENT 'Descripción: Circunferencia de la cintura del usuario.\nTipo: Numérico (Decimal)\nNaturaleza: Cuantitativo\nDominio: Números decimales positivos.',
        MODIFY COLUMN nivel_nutriente_sangre text COMMENT 'Descripción: Nivel de nutrientes en la sangre del usuario.\nTipo: Alfanumérico (Texto)\nNaturaleza: Cualitativo\nDominio: Texto.'

'''),


     migrations.RunSQL(
        '''
        ALTER TABLE indicadores_nutricionales
        COMMENT 'OWNER: Nutrición\\nCARGADA POR: Adalid, Aldair, Emilio\\nClasificación del Tipo de Tabla:Fuerte, Catálogo\\nDescripción de la Tabla: Esta tabla almacena información sobre los indicadores nutricionales utilizados para evaluar la salud de los usuarios. Contiene detalles como la edad, el índice de masa corporal (IMC), la circunferencia de la cintura, y el nivel de nutrientes en la sangre.'

'''),

    migrations.RunSQL(
        '''
        ALTER TABLE valoraciones_nutricionales
        MODIFY COLUMN id int unsigned NOT NULL AUTO_INCREMENT COMMENT 'Descripción: Identificador único de la valoración nutricional.\nTipo: Numérico (Entero)\nNaturaleza: Cuantitativo\nDominio: Números enteros positivos.\nComposición: Autoincremental.',
        MODIFY COLUMN usuario_id int unsigned DEFAULT NULL COMMENT 'Descripción: Identificador único del usuario al que se le realizó la valoración nutricional.\nTipo: Numérico (Entero)\nNaturaleza: Cuantitativo\nDominio: Números enteros positivos.\nRestricción: Clave foránea, se relaciona con la tabla de usuarios.',
        MODIFY COLUMN indicador_nutricional_id int unsigned DEFAULT NULL COMMENT 'Descripción: Identificador único del indicador nutricional evaluado en la valoración.\nTipo: Numérico (Entero)\nNaturaleza: Cuantitativo\nDominio: Números enteros positivos.\nRestricción: Clave foránea, se relaciona con la tabla de indicadores nutricionales.',
        MODIFY COLUMN valor varchar(20) NOT NULL COMMENT 'Descripción: Valor asignado al indicador nutricional en la valoración.\nTipo: Alfanumérico\nNaturaleza: Cualitativo\nDominio: Cadena de texto con hasta 20 caracteres.',
        MODIFY COLUMN fecha_valoracion datetime DEFAULT NULL COMMENT 'Descripción: Fecha y hora en que se realizó la valoración nutricional.\nTipo: Fecha y hora\nNaturaleza: Cuantitativo\nDominio: Valores de fecha y hora válidos.',
        MODIFY COLUMN empleado_id int unsigned DEFAULT NULL COMMENT 'Descripción: Identificador único del empleado que realizó la valoración nutricional.\nTipo: Numérico (Entero)\nNaturaleza: Cuantitativo\nDominio: Números enteros positivos.\nRestricción: Clave foránea, se relaciona con la tabla de empleados.',
        MODIFY COLUMN comentarios text COMMENT 'Descripción: Comentarios adicionales o notas sobre la valoración nutricional.\nTipo: Alfanumérico\nNaturaleza: Cualitativo\nDominio: Texto de longitud variable.'

'''),


    migrations.RunSQL(
        '''
        ALTER TABLE valoraciones_nutricionales
        COMMENT 'OWNER: Nutrición\\nCARGADA POR: Adalid, Aldair, Emilio\\nClasificación del Tipo de Tabla: Dévil, Derivada\\nDescripción de la Tabla: Almacena valoraciones nutricionales realizadas a usuarios, incluyendo indicadores nutricionales, valores, fecha de valoración, empleado que realizó la valoración y comentarios.'

'''),


    migrations.RunSQL(
        '''
        ALTER TABLE seguimientos_dietas_usuarios
        MODIFY COLUMN dieta_usuario_id int unsigned DEFAULT NULL COMMENT 'Descripción: Identificador único de la dieta asignada al usuario.\nTipo: Numérico (Entero)\nNaturaleza: Cuantitativo\nDominio: Números enteros positivos.\nRestricción: Clave foránea, se relaciona con la tabla de dietas_usuarios.',
        MODIFY COLUMN descripcion text COMMENT 'Descripción: Descripción del seguimiento de la dieta.\nTipo: Alfanumérico\nNaturaleza: Cualitativo\nDominio: Texto de longitud variable.',
        MODIFY COLUMN empleado_id int unsigned DEFAULT NULL COMMENT 'Descripción: Identificador único del empleado responsable del seguimiento.\nTipo: Numérico (Entero)\nNaturaleza: Cuantitativo\nDominio: Números enteros positivos.\nRestricción: Clave foránea, se relaciona con la tabla de empleados.',
        MODIFY COLUMN estatus enum('Programada','Iniciada','Seguimiento','Suspendida','Finalizada') DEFAULT NULL COMMENT 'Descripción: Estado actual del seguimiento de la dieta.\nTipo: Enumerado\nNaturaleza: Cualitativo\nDominio: {Programada, Iniciada, Seguimiento, Suspendida, Finalizada}',
        MODIFY COLUMN porcentaje_avance enum('0% a 10%','11% a 20%','21% a 30%','31% a 40%','41% a 50%','51% a 60%','61% a 70%','71% a 80%','81% a 90%','91% a 100%') DEFAULT NULL COMMENT 'Descripción: Porcentaje de avance del seguimiento de la dieta.\nTipo: Enumerado\nNaturaleza: Cuantitativo\nDominio: {"0% a 10%", "11% a 20%", "21% a 30%", "31% a 40%", "41% a 50%", "51% a 60%", "61% a 70%", "71% a 80%", "81% a 90%", "91% a 100%"}'

'''),


    migrations.RunSQL(
        '''
        connection.execute(text('''
        ALTER TABLE seguimientos_dietas_usuarios
        COMMENT 'OWNER: Nutrición\\nCARGADA POR: Adalid, Aldair, Emilio\\nClasificación del Tipo de Tabla:Dévil, Derivada\\nDescripción de la Tabla: Registra el seguimiento de las dietas asignadas a los usuarios, incluyendo descripción, empleado responsable, estado y porcentaje de avance.'

'''),


    migrations.RunSQL(
        '''
        ALTER TABLE preguntas_nutricionales
        MODIFY COLUMN persona_id int unsigned DEFAULT NULL COMMENT 'Descripción: Identificador único de la persona a la que se le han hecho las preguntas nutricionales.\nTipo: Numérico (Entero)\nNaturaleza: Cuantitativo\nDominio: Números enteros positivos.\nRestricción: Clave foránea, se relaciona con la tabla de personas.',
        MODIFY COLUMN comidas_x_dia enum('2','3','4','5 o mas') DEFAULT NULL COMMENT 'Descripción: Número de comidas que la persona consume en un día.\nTipo: Enumerado\nNaturaleza: Cualitativo\nDominio: {2, 3, 4, 5 o más}',
        MODIFY COLUMN variedad_comidas enum('Nunca','Algunas Veces','Normalmente','Siempre') DEFAULT NULL COMMENT 'Descripción: Frecuencia con la que la persona consume una variedad de comidas.\nTipo: Enumerado\nNaturaleza: Cualitativo\nDominio: {Nunca, Algunas veces, Normalmente, Siempre}',
        MODIFY COLUMN regularidad_carbohidratos enum('Nunca','Algunas Veces','Normalmente','Siempre') DEFAULT NULL COMMENT 'Descripción: Frecuencia con la que la persona consume carbohidratos.\nTipo: Enumerado\nNaturaleza: Cualitativo\nDominio: {Nunca, Algunas veces, Normalmente, Siempre}',
        MODIFY COLUMN grasa_g enum('10g','30g','60g','100g o mas') DEFAULT NULL COMMENT 'Descripción: Cantidad de grasa en gramos que la persona consume.\nTipo: Enumerado\nNaturaleza: Cuantitativo\nDominio: {10g, 30g, 60g, 100g o más}',
        MODIFY COLUMN calorias_consumidas enum('Menos de 1000 Kcal','1000 Kcal','1500 Kcal','2000 Kcal','2500 Kcal','3000 Kcal','3500 Kcal','4000 Kcal','Mas de 4000 Kcal') DEFAULT NULL COMMENT 'Descripción: Cantidad de calorías consumidas por la persona.\\nTipo: Enumerado\\nNaturaleza: Cuantitativo\\nDominio: {Menos de 1000 Kcal, 1000 Kcal, 1500 Kcal, 2000 Kcal, 2500 Kcal, 3000 Kcal, 3500 Kcal, 4000 Kcal, Más de 4000 Kcal}'

'''),


    migrations.RunSQL(
        '''
        ALTER TABLE preguntas_nutricionales
        COMMENT 'OWNER: Nutrición\\nCARGADA POR: Adalid, Aldair, Emilio\\nClasificación del Tipo de Tabla: Fuerte, Catálogo\\nDescripción de la Tabla: Almacena respuestas a preguntas relacionadas con la nutrición de los usuarios, como la cantidad de comidas por día, la variedad de comidas, el consumo de carbohidratos, etc.'

''')
 ]

